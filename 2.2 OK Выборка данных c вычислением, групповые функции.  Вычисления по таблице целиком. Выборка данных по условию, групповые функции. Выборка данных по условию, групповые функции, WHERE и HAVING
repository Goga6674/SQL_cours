1. Выборка данных c вычислением, групповые функции. 
2. Вычисления по таблице целиком.
3. Выборка данных по условию, групповые функции. 
4. Выборка данных по условию, групповые функции, WHERE и HAVING


        1. Выборка данных c вычислением, групповые функции. 

В качестве аргумента групповых функций  SQL может использоваться не только столбец, но и любое допустимое в SQL арифметическое выражение.

Пример
Вывести суммарную стоимость книг каждого автора.

Запрос:
        SELECT author, SUM(price * amount) AS Стоимость
        FROM book
        GROUP BY author;

Результат:
+------------------+-----------+
| author           | Стоимость |
+------------------+-----------+
| Булгаков М.А.    | 4715.47   |
| Достоевский Ф.М. | 11802.03  |
| Есенин С.А.      | 9750.00   |
+------------------+-----------+
Групповые функции могут быть элементами выражений. Например, при вычислении средней стоимости книг каждого автора на предыдущем шаге получились значения с шестью знаками после запятой.
А поскольку это деньги, значения нужно округлить до 2 знаков после запятой.

Пример
Найти среднюю цену книг каждого автора.

Запрос:
        SELECT author, ROUND(AVG(price),2) AS Средняя_цена
        FROM book
        GROUP BY author;

Результат:
+------------------+--------------+
| author           | Средняя_цена |
+------------------+--------------+
| Булгаков М.А.    | 605.75       |
| Достоевский Ф.М. | 579.84       |
| Есенин С.А.      | 650.00       |
+------------------+--------------+

#######################################################################################


            2. Вычисления по таблице целиком.

Групповые функции позволяют вычислять итоговые значения по всей таблице. Например, можно посчитать общее количество книг на складе, вычислить суммарную стоимость и пр.
Для этого после ключевого слова SELECT указывается групповая функция для выражения или имени столбца, а ключевые слова GROUP BY опускаются.

Пример
Посчитать количество экземпляров книг на складе.

Запрос:
        SELECT SUM(amount) AS Количество
        FROM book;

Результат:
+------------+
| Количество |
+------------+
| 46         |
+------------+ 
Результатом таких запросов является единственная строка с вычисленными по таблице значениями.


Пример
Посчитать общее количество экземпляров книг на складе и их стоимость .

Запрос:
        SELECT SUM(amount) AS Количество, 
        SUM(price * amount) AS Стоимость
        FROM book;
        
Результат:
+------------+-----------+
| Количество | Стоимость |
+------------+-----------+
| 46         | 26267.50  |
+------------+-----------+
#######################################################################################

3. Выборка данных по условию, групповые функции. 

В запросы с групповыми функциями можно включать условие отбора строк, которое в обычных запросах записывается после WHERE.
В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING , которое размещается после оператора GROUP BY.

Пример
Найти минимальную и максимальную цену книг всех авторов, общая стоимость книг которых больше 5000.

Запрос:
        SELECT author,
            MIN(price) AS Минимальная_цена, 
            MAX(price) AS Максимальная_цена
        FROM book
        GROUP BY author
        HAVING SUM(price * amount) > 5000; 

Результат:
+------------------+------------------+-------------------+
| author           | Минимальная_цена | Максимальная_цена |
+------------------+------------------+-------------------+
| Достоевский Ф.М. | 460.00           | 799.01            |
| Есенин С.А.      | 650.00           | 650.00            |
+------------------+------------------+-------------------+
Также в запросах с группировкой можно сортировать данные.

Пример
Найти минимальную и максимальную цену книг всех авторов, общая стоимость книг которых больше 5000. Результат вывести по убыванию минимальной цены.

Запрос:
        SELECT author,
            MIN(price) AS Минимальная_цена, 
            MAX(price) AS Максимальная_цена
        FROM book
        GROUP BY author
        HAVING SUM(price * amount) > 5000 
        ORDER BY Минимальная_цена DESC;
Результат:
+------------------+------------------+-------------------+
| author           | Минимальная_цена | Максимальная_цена |
+------------------+------------------+-------------------+
| Есенин С.А.      | 650.00           | 650.00            |
| Достоевский Ф.М. | 460.00           | 799.01            |
+------------------+------------------+-------------------+

##########################################################################################

4. Выборка данных по условию, групповые функции, WHERE и HAVING

WHERE и HAVING могут использоваться в одном запросе. При этом необходимо учитывать порядок выполнения  SQL запроса на выборку на СЕРВЕРЕ:

FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY
Сначала определяется таблица, из которой выбираются данные (FROM), затем из этой таблицы отбираются записи в соответствии с условием  WHERE,
выбранные данные агрегируются (GROUP BY),  из агрегированных записей выбираются те, которые удовлетворяют условию после HAVING.
Потом формируются данные результирующей выборки, как это указано после SELECT ( вычисляются выражения, присваиваются имена и пр. ). Результирующая выборка сортируется, как указано после ORDER BY.

Важно!   Порядок ВЫПОЛНЕНИЯ запросов - это не порядок ЗАПИСИ ключевых слов в запросе на выборку.
         Порядок записи (синтаксис запроса) остается таким же, как рассматривался ранее в курсе. Порядок ВЫПОЛНЕНИЯ  нужен для того, чтобы понять,
         почему, например, в WHERE нельзя использовать имена выражений из SELECT. Просто SELECT выполняется компилятором позже, чем WHERE, поэтому ему неизвестно, какое там выражение написано.

Пример

Вывести максимальную и минимальную цену книг каждого автора, кроме Есенина, количество экземпляров книг которого больше 10. 

SELECT author,
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена
FROM book
WHERE author <> 'Есенин С.А.'
GROUP BY author
HAVING SUM(amount) > 10;

Результат:
+------------------+------------------+-------------------+
| author           | Минимальная_цена | Максимальная_цена |
+------------------+------------------+-------------------+
| Достоевский Ф.М. | 460.00           | 799.01            |
+------------------+------------------+-------------------+
Другим способом решения примера является запрос:

SELECT author,
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(amount) > 10 AND author <> 'Есенин С.А.';

Не смотря на то что результат будет одинаковым, так делать не рекомендуется. «Потому что как написано - запрос сначала выбирает всех авторов, потом выводит данные,
рассчитывая минимальное и максимальное значение цены для каждого, и только после всего убирает Есенина.
Можно убрать Есенина в данном случае раньше и не использовать ресурсы базы для расчета его минимального и максимального значения,
как это сделано в первом варианте. На небольшой базе быстродействия не ощутить,
но если выполнять такое на продуктивной, то второй вариант значительно проигрывает...»
